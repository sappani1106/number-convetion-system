import tkinter as tk
from tkinter import messagebox

def decimal_to_binary(decimal):
    return bin(decimal).replace("0b", "")

def decimal_to_octal(decimal):
    return oct(decimal).replace("0o", "")

def decimal_to_hexadecimal(decimal):
    return hex(decimal).replace("0x", "")

def binary_to_decimal(binary):
    return int(binary, 2)

def octal_to_decimal(octal):
    return int(octal, 8)

def hexadecimal_to_decimal(hexadecimal):
    return int(hexadecimal, 16)

def validate_input(input_str, base):
    try:
        int(input_str, base)
        return True
    except ValueError:
        return False

class NumberSystemConverter(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Number System Converter")
        self.geometry("400x400")
        self.history = []

        self.create_widgets()

    def create_widgets(self):
        tk.Label(self, text="Enter Number:").grid(row=0, column=0, padx=10, pady=10)
        self.input_entry = tk.Entry(self)
        self.input_entry.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(self, text="From:").grid(row=1, column=0, padx=10, pady=10)
        self.from_var = tk.StringVar(value="Decimal")
        self.from_menu = tk.OptionMenu(self, self.from_var, "Decimal", "Binary", "Octal", "Hexadecimal")
        self.from_menu.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(self, text="To:").grid(row=2, column=0, padx=10, pady=10)
        self.to_var = tk.StringVar(value="Binary")
        self.to_menu = tk.OptionMenu(self, self.to_var, "Binary", "Octal", "Hexadecimal", "Decimal")
        self.to_menu.grid(row=2, column=1, padx=10, pady=10)

        self.convert_button = tk.Button(self, text="Convert", command=self.convert)
        self.convert_button.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

        self.result_label = tk.Label(self, text="Result: ")
        self.result_label.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        self.history_label = tk.Label(self, text="History: ")
        self.history_label.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        self.save_button = tk.Button(self, text="Save History", command=self.save_history)
        self.save_button.grid(row=6, column=0, columnspan=2, padx=10, pady=10)

    def convert(self):
        input_value = self.input_entry.get()
        from_system = self.from_var.get()
        to_system = self.to_var.get()

        if from_system == "Decimal":
            if validate_input(input_value, 10):
                decimal_value = int(input_value)
            else:
                messagebox.showerror("Invalid Input", "Please enter a valid decimal number.")
                return
        elif from_system == "Binary":
            if validate_input(input_value, 2):
                decimal_value = binary_to_decimal(input_value)
            else:
                messagebox.showerror("Invalid Input", "Please enter a valid binary number.")
                return
        elif from_system == "Octal":
            if validate_input(input_value, 8):
                decimal_value = octal_to_decimal(input_value)
            else:
                messagebox.showerror("Invalid Input", "Please enter a valid octal number.")
                return
        elif from_system == "Hexadecimal":
            if validate_input(input_value, 16):
                decimal_value = hexadecimal_to_decimal(input_value)
            else:
                messagebox.showerror("Invalid Input", "Please enter a valid hexadecimal number.")
                return

        if to_system == "Binary":
            result = decimal_to_binary(decimal_value)
        elif to_system == "Octal":
            result = decimal_to_octal(decimal_value)
        elif to_system == "Hexadecimal":
            result = decimal_to_hexadecimal(decimal_value)
        elif to_system == "Decimal":
            result = str(decimal_value)

        self.result_label.config(text=f"Result: {result}")
        self.history.append(f"{input_value} ({from_system}) -> {result} ({to_system})")
        self.history_label.config(text="History:\n" + "\n".join(self.history))

    def save_history(self):
        with open("conversion_history.txt", "w") as file:
            for record in self.history:
                file.write(f"{record}\n")
        messagebox.showinfo("Saved", "History saved to conversion_history.txt")

if __name__ == "__main__":
    app = NumberSystemConverter()
    app.mainloop()
